import os
import logging
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ConversationHandler,
    ContextTypes,
    filters,
)
from database import Database

# –õ–æ–≥–∏
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –∞–Ω–∫–µ—Ç—ã
NAME, LEVEL, INTERESTS, GOAL = range(4)

class RandomCoffeeBot:
    def __init__(self):
        load_dotenv()
        self.token = os.getenv("BOT_TOKEN")
        self.db = Database()
        self.app = Application.builder().token(self.token).build()
        self.setup_handlers()

    def setup_handlers(self):
        conv_handler = ConversationHandler(
            entry_points=[CommandHandler("start", self.start)],
            states={
                NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.get_name)],
                LEVEL: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.get_level)],
                INTERESTS: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.get_interests)],
                GOAL: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.get_goal)],
            },
            fallbacks=[]
        )
        self.app.add_handler(conv_handler)
        self.app.add_handler(CallbackQueryHandler(self.find_match, pattern="^match$"))
        self.app.add_handler(CommandHandler("match", self.match_command))

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        await update.message.reply_text("üëã –ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π –Ω–∞–π–¥–µ–º —Ç–µ–±–µ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –¥–ª—è –ø—Ä–∞–∫—Ç–∏–∫–∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞! –¢–µ–±–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Ç–æ–ª—å–∫–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –ø–∞—Ä—É –≤–æ–ø—Ä–æ—Å–æ–≤. Let's go! \n\n–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
        return NAME

    async def get_name(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        context.user_data['name'] = update.message.text.strip()
        await update.message.reply_text("üìö –ö–∞–∫–æ–π —É —Ç–µ–±—è —É—Ä–æ–≤–µ–Ω—å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞? (–ù–∞–ø—Ä–∏–º–µ—Ä: –ê1/A2/B1/B2/C1)")
        return LEVEL

    async def get_level(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        context.user_data['level'] = update.message.text.strip()
        await update.message.reply_text("üéØ –ö–∞–∫–∏–µ —É —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—ã? –ü–µ—Ä–µ—á–∏—Å–ª–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é. (–ù–∞–ø—Ä–∏–º–µ—Ä: –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è, –º—É–∑—ã–∫–∞, —Å–ø–æ—Ä—Ç –∏ —Ç.–¥.)")
        return INTERESTS

    async def get_interests(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        context.user_data['interests'] = update.message.text.strip()
        await update.message.reply_text("üó£Ô∏è –ö–∞–∫–∞—è —Ç–≤–æ—è —Ü–µ–ª—å –≤ –∏–∑—É—á–µ–Ω–∏–∏ —è–∑—ã–∫–∞? (–ù–∞–ø—Ä–∏–º–µ—Ä: —Ä–∞–±–æ—Ç–∞, —É—á–µ–±–∞, –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è –∏ —Ç.–¥.)")
        return GOAL

    async def get_goal(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        context.user_data['goal'] = update.message.text.strip()
        user_data = {
            'user_id': update.message.from_user.id,
            'username': update.message.from_user.username,
            'name': context.user_data['name'],
            'level': context.user_data['level'],
            'interests': context.user_data['interests'],
            'goal': context.user_data['goal']
        }
        self.db.save_user(user_data)

        keyboard = [[InlineKeyboardButton("üîç –ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞", callback_data="match")]]
        await update.message.reply_text(
            "‚úÖ –°–ø–∞—Å–∏–±–æ! –ê–Ω–∫–µ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞! –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞. –ò–ª–∏ –ø–æ–¥–æ–∂–¥–∏ –∏ —è —Å–∞–º –æ—Ç–ø—Ä–∞–≤–ª—é —Ç–µ–±–µ –ø–∞—Ä—É —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return ConversationHandler.END

    async def find_match(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()
        await self.match_users(query.from_user.id, context)

    async def match_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        await self.match_users(update.message.from_user.id, context)

    async def match_users(self, user_id, context):
        user = self.db.get_user(user_id)
        if not user:
            await context.bot.send_message(user_id, "–ü–µ—Ä–≤—ã–º –¥–µ–ª–æ–º –∑–∞–ø–æ–ª–Ω–∏ –∞–Ω–∫–µ—Ç—É —á–µ—Ä–µ–∑ /start.")
            return

        match = self.db.find_match(user_id, user['interests'], user['level'])
        if match:
            msg = (
                f"üéâ –ù–∞–π–¥–µ–Ω —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫!\n\n"
                f"–ò–º—è: {match['name']}\n"
                f"–£—Ä–æ–≤–µ–Ω—å: {match['level']}\n"
                f"–ò–Ω—Ç–µ—Ä–µ—Å—ã: {match['interests']}\n\n"
                f"–ù–∞–ø–∏—à–∏ –µ–º—É: @{match['username']}"
            )
        else:
            msg = "üòï –ü–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–≤. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ!"
        await context.bot.send_message(user_id, msg)

    def run(self):
        self.app.run_polling()

if __name__ == "__main__":
    bot = RandomCoffeeBot()
    bot.run()
