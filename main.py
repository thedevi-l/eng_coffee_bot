import os
import logging
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    ConversationHandler,
    MessageHandler,
    ContextTypes,
    filters
)
from database import Database
from apscheduler.schedulers.background import BackgroundScheduler
import asyncio

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –∞–Ω–∫–µ—Ç—ã
NAME, LEVEL, INTERESTS, GOAL = range(4)


class RandomCoffeeBot:
    def __init__(self):
        load_dotenv()
        self.token = os.getenv("BOT_TOKEN")
        self.db = Database()
        self.app = Application.builder().token(self.token).build()

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self.app.add_handler(CommandHandler("start", self.start))
        self.app.add_handler(CommandHandler("match", self.match_command))
        self.app.add_handler(CallbackQueryHandler(self.start_form, pattern="^start_form$"))
        self.app.add_handler(CallbackQueryHandler(self.handle_match, pattern="^match$"))

        conv_handler = ConversationHandler(
            entry_points=[CallbackQueryHandler(self.start_form, pattern="^start_form$")],
            states={
                NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.get_name)],
                LEVEL: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.get_level)],
                INTERESTS: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.get_interests)],
                GOAL: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.get_goal)],
            },
            fallbacks=[]
        )
        self.app.add_handler(conv_handler)

        # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
        scheduler = BackgroundScheduler()
        scheduler.add_job(lambda: asyncio.run(self.weekly_match()), 'interval', weeks=1)
        scheduler.start()

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        keyboard = [[InlineKeyboardButton("üìù –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É", callback_data="start_form")]]
        await update.message.reply_text(
            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç Random Coffee –¥–ª—è –ø—Ä–∞–∫—Ç–∏–∫–∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞.\n\n"
            "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É.",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    async def start_form(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ó–∞–ø—É—Å–∫ –∞–Ω–∫–µ—Ç—ã –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()
        await query.message.reply_text("–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
        return NAME

    async def get_name(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        context.user_data['name'] = update.message.text
        await update.message.reply_text("üìö –ö–∞–∫–æ–π —É —Ç–µ–±—è —É—Ä–æ–≤–µ–Ω—å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ?")
        return LEVEL

    async def get_level(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        context.user_data['level'] = update.message.text
        await update.message.reply_text("üéØ –ö–∞–∫–∏–µ —É —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—ã? (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)")
        return INTERESTS

    async def get_interests(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        context.user_data['interests'] = update.message.text
        await update.message.reply_text("üó£Ô∏è –ö–∞–∫–∞—è —Ç–≤–æ—è —Ü–µ–ª—å –≤ –∏–∑—É—á–µ–Ω–∏–∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ?")
        return GOAL

    async def get_goal(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        context.user_data['goal'] = update.message.text

        user_data = {
            'user_id': update.message.from_user.id,
            'username': update.message.from_user.username,
            'name': context.user_data['name'],
            'level': context.user_data['level'],
            'interests': context.user_data['interests'],
            'goal': context.user_data['goal']
        }

        self.db.save_user(user_data)

        keyboard = [[InlineKeyboardButton("üîç –ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞", callback_data="match")]]
        await update.message.reply_text(
            "‚úÖ –ê–Ω–∫–µ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞! –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return ConversationHandler.END

    async def handle_match(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()
        await self.match_user(query.from_user.id, context)

    async def match_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        await self.match_user(update.message.from_user.id, context)

    async def match_user(self, user_id, context: ContextTypes.DEFAULT_TYPE):
        user = self.db.get_user(user_id)
        if not user:
            await context.bot.send_message(user_id, "–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–∏ –∞–Ω–∫–µ—Ç—É —á–µ—Ä–µ–∑ /start")
            return

        match = self.db.find_best_match(user_id, user['level'], user['interests'])
        if match:
            text = (
                f"üéâ –ù–∞–π–¥–µ–Ω —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫!\n\n"
                f"–ò–º—è: {match['name']}\n"
                f"–£—Ä–æ–≤–µ–Ω—å: {match['level']}\n"
                f"–ò–Ω—Ç–µ—Ä–µ—Å—ã: {match['interests']}\n"
                f"–°–≤—è–∂–∏—Å—å: @{match['username']}"
            )
        else:
            text = "üòï –ü–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–≤. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ!"
        await context.bot.send_message(user_id, text)

    async def weekly_match(self):
        for user in self.db.get_all_users():
            await self.match_user(user['user_id'], self.app)

    def run(self):
        self.app.run_polling()


if __name__ == "__main__":
    bot = RandomCoffeeBot()
    bot.run()
